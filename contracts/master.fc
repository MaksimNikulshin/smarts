#include "imports/stdlib.fc";
#include "constants.fc";

global slice data::admin;
global slice data::router;
global slice data::market;
global int data::market_fee;
global int data::min_bet;
global int data::jetton_amount;
global int data::ephemeral_jetton_balance;
global int data::ephemeral_ton_amount;
global int data::fee;
global int data::active;
global int data::finished;
global int data::confirmation;
global slice data::jetton_wallet;
global slice data::jetton_wallet_wrap;

global int context::bounced?;
global int context::op;
global int context::query_id;
global slice context::sender;


() load_data() impure {
    
    slice ds = get_data().begin_parse();
    data::admin = ds~load_msg_addr();
    data::router = ds~load_msg_addr();
    data::market = ds~load_msg_addr();
    ds = ds~load_ref().begin_parse();
    data::market_fee = ds~load_uint(64);
    data::min_bet = ds~load_coins();
    data::jetton_amount = ds~load_coins();
    data::ephemeral_jetton_balance = ds~load_coins();
    data::ephemeral_ton_amount = ds~load_coins();
    data::fee = ds~load_coins();
    data::active = ds~load_int(1);
    data::finished = ds~load_int(1);
    data::confirmation = ds~load_int(1);
    ds = ds~load_ref().begin_parse();
    data::jetton_wallet = ds~load_msg_addr();
    data::jetton_wallet_wrap = ds~load_msg_addr();
}

() save_data() impure {
    set_data(begin_cell()
        .store_slice(data::admin)
        .store_slice(data::router)
        .store_slice(data::market)
        .store_ref(begin_cell()
            .store_uint(data::market_fee, 64)
            .store_coins(data::min_bet)
            .store_coins(data::jetton_amount)
            .store_coins(data::ephemeral_jetton_balance)
            .store_coins(data::ephemeral_ton_amount)
            .store_coins(data::fee)
            .store_int(data::active, 1)
            .store_int(data::finished, 1)
            .store_int(data::confirmation, 1)
            .store_ref(begin_cell()
                .store_slice(data::jetton_wallet)
                .store_slice(data::jetton_wallet_wrap)
            .end_cell())
        .end_cell())
    .end_cell());
}

() send_tokens(slice jetton_wallet, slice to, int fee, int mode, int amount, cell forward_payload, int forward_ton_amount) impure {
    send_raw_message(begin_cell()
        .store_uint(0x18, 6)
        .store_slice(jetton_wallet)
        .store_coins(fee)
        .store_uint(0, 107)
        .store_uint(op::jetton::transfer, 32)
        .store_uint(context::query_id, 64)
        .store_coins(amount)
        .store_slice(to)
        .store_uint(0, 3)
        .store_coins(forward_ton_amount)
        .store_uint(1, 1)
        .store_ref(forward_payload)
    .end_cell(), mode);
}

() send_burn_jetton(slice jetton_wallet, int value, int amount) impure inline {
   send_raw_message(begin_cell()
        .store_uint(0x18, 6)
        .store_slice(jetton_wallet)
        .store_coins(value)
        .store_uint(0, 107)
        .store_uint(op::jetton::burn, 32)
        .store_uint(context::query_id, 64)
        .store_coins(amount)
        .store_uint(0, 3)
    .end_cell(), 0);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_bits() < 96) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    context::bounced? = cs~load_uint(4) & 1;
    if (context::bounced?) {
        in_msg_body~skip_bits(32);
    }
    context::sender = cs~load_msg_addr();
    context::op = in_msg_body~load_uint(32);
    context::query_id = in_msg_body~load_uint(64);

    load_data();

    if (context::op == op::set_data) {
        ifnot (data::jetton_wallet_wrap.preload_uint(2) == 0) {
            throw(error::data_already_set);
        }

        data::jetton_wallet = in_msg_body~load_msg_addr();
        data::jetton_wallet_wrap = in_msg_body~load_msg_addr();
        data::router = in_msg_body~load_msg_addr();
    }

    elseif (context::op == op::buy) {
        msg_value -= get_compute_fee(0, const::fee_const);
        data::fee = msg_value * data::market_fee / const::e9;
        msg_value -= msg_value * data::market_fee / const::e9;
        
        throw_unless(error::not_enough_tons, msg_value >= data::min_bet);
        throw_if(error::finished, data::finished);

        ifnot (data::active) {
            throw_unless(error::not_active, equal_slices(data::admin, context::sender));
        }

        int k = data::ephemeral_jetton_balance * data::ephemeral_ton_amount;

        int amount = data::ephemeral_jetton_balance - k / (data::ephemeral_ton_amount + msg_value);

        data::jetton_amount -= amount;

        data::ephemeral_jetton_balance -= amount;
        data::ephemeral_ton_amount += msg_value;

        throw_unless(error::not_enough_jettons, data::jetton_amount > 0);

        send_tokens(data::jetton_wallet_wrap, context::sender, get_compute_fee(0, const::fee_const), 0, amount, begin_cell().end_cell(), 0);

        if (data::jetton_amount <= 100 * const::e9) {
            accept_message();

            int fee_to_market = my_balance - (952 * const::e9);

            send_raw_message(begin_cell()
                .store_uint(0x18, 6)
                .store_slice(data::router)
                .store_coins(get_compute_fee(0, const::fee_const))
                .store_uint(0, 107)
                .store_uint(op::provide_liquidity, 32)
                .store_uint(context::query_id, 64)
            .end_cell(), 0);

            send_raw_message(begin_cell()
                .store_uint(0x10, 6)
                .store_slice(data::market)
                .store_coins(fee_to_market)
                .store_uint(0, 107)
            .end_cell(), 0);

            data::finished = true;
            data::active = false;
        }

        data::active = true;
    }

    elseif (context::op == op::jetton::transfer_notification) {
        int amount = in_msg_body~load_coins();
        slice user = in_msg_body~load_msg_addr();

        slice forward_payload = in_msg_body;

        if (forward_payload~load_int(1)) {
            forward_payload = forward_payload~load_ref().begin_parse(); 
        }

        if (forward_payload.slice_bits() < 32) {
            send_tokens(context::sender, user, msg_value - get_compute_fee(0, const::fee_const_min), 0, amount, begin_cell().end_cell(), 0);

            save_data();
            return ();
        }

        int op = forward_payload~load_uint(32);

        if (op == op::buy) {
            ifnot ((data::active)
            & (equal_slices(data::jetton_wallet_wrap, context::sender))
            & (amount > 0)
            & (msg_value >= get_compute_fee(0, const::fee_const)))
            & ( ~ data::finished) {
                send_tokens(context::sender, user, msg_value - get_compute_fee(0, const::fee_const_min), 0, amount, begin_cell().end_cell(), 0);

                save_data();
                return ();
            }

            int k = data::ephemeral_jetton_balance * data::ephemeral_ton_amount;

            int ton_amount = data::ephemeral_ton_amount - k / (data::ephemeral_jetton_balance + amount);

            data::ephemeral_jetton_balance += amount;
            data::ephemeral_ton_amount -= ton_amount;

            accept_message();

            send_raw_message(begin_cell()
                .store_uint(0x10, 6)
                .store_slice(user)
                .store_coins(ton_amount)
                .store_uint(0, 107)
            .end_cell(), 64);
        }

        elseif (op == op::swap) {
            ifnot ((data::confirmation)
            & (equal_slices(data::jetton_wallet_wrap, context::sender))
            & (amount > 0)
            & (msg_value >= get_compute_fee(0, const::fee_const)))
            & (data::finished) {
                send_tokens(context::sender, user, msg_value - get_compute_fee(0, const::fee_const_min), 0, amount, begin_cell().end_cell(), 0);

                save_data();
                return ();
            }

            send_tokens(data::jetton_wallet, user, msg_value - get_compute_fee(0, const::fee_const_min), 0, amount, begin_cell().end_cell(), 0);
        }

        else {
            send_tokens(context::sender, user, msg_value - get_compute_fee(0, const::fee_const_min), 0, amount, begin_cell().end_cell(), 0);

            save_data();
            return ();
        }

        
    }

    elseif (op::get_fee) {
        throw_unless(error::wrong_sender, equal_slices(data::market, context::sender));
        accept_message();

        slice prise_pool = in_msg_body~load_msg_addr();

        int fee_to_market = data::fee * 175 / 10000000;

        send_raw_message(begin_cell()
            .store_uint(0x10, 6)
            .store_slice(data::market)
            .store_coins(fee_to_market)
            .store_uint(0, 107)
        .end_cell(), 0);

        send_raw_message(begin_cell()
            .store_uint(0x10, 6)
            .store_slice(prise_pool)
            .store_coins(data::fee - fee_to_market)
            .store_uint(0, 107)
        .end_cell(), 0);
    }

    elseif (op::confirm) {
        throw_unless(error::wrong_sender, equal_slices(data::market, context::sender));

        data::confirmation = true;
    }

    else {
        throw(0xffff);
    }

    save_data();
}

(slice, slice, slice, int, int, int, int, int, int, int, int, int, slice, slice) get_contract_data() method_id {
    load_data();
    return (data::admin, data::router, data::market, data::market_fee, data::min_bet, data::jetton_amount, data::ephemeral_jetton_balance, data::ephemeral_ton_amount, data::fee, data::active, data::finished, data::confirmation, data::jetton_wallet, data::jetton_wallet_wrap);
}